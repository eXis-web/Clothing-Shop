{"version":3,"file":"static/js/837.c08c0738.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form copy/sign-up-form.styles.tsx","components/sign-up-form copy/sign-up-form.component.tsx","components/sign-in-form copy/sign-in-form.styles.tsx","components/sign-in-form copy/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n  LoadingSpinner,\n} from \"./button.styles\";\n\nimport { FC, ButtonHTMLAttributes } from \"react\";\n\nexport enum BUTTON_TYPE_CLASSES  {\n  base = \"base\",\n  google = \"google-sign-in\",\n  inverted = \"inverted\",\n};\n\n\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base) : typeof BaseButton=>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  }[buttonType]);\n\nexport type ButtonProps = {\n  buttonType?: BUTTON_TYPE_CLASSES;\n  isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button : FC<ButtonProps> = ({ children, buttonType, isLoading, ...otherProps }) => {\n  const CustomButton = getButton(buttonType);\n  return (\n    <CustomButton disabled={isLoading} {...otherProps}>\n      {isLoading ? <LoadingSpinner /> : children}\n    </CustomButton>\n  );\n};\n\nexport default Button;\n","import styled from \"styled-components\";\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: \"Open Sans Condensed\";\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nexport const LoadingSpinner = styled.div`\n  display: inline-block;\n  width: 30px;\n  height: 30px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import styled, { css } from 'styled-components';\n\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n    top: -14px;\n    font-size: 12px;\n    color: ${mainColor};\n`;\n\ntype FormInputLabelProps = {\n    shrink?: boolean;\n}\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n    color: ${subColor};\n    font-size: 16px;\n    font-weight: normal;\n    position: absolute;\n    pointer-events: none;\n    left: 5px;\n    top: 10px;\n    transition: 300ms ease all;\n    ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n    background: none;\n    background-color: white;\n    color: ${subColor};\n    font-size: 18px;\n    padding: 10px 10px 10px 5px;\n    display: block;\n    width: 100%;\n    border: none;\n    border-radius: 0;\n    border-bottom: 1px solid ${subColor};\n    margin: 25px 0;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus ~ ${FormInputLabel} {\n        ${shrinkLabelStyles};\n    }\n`;\n\nexport const Group = styled.div`\n    position: relative;\n    margin: 45px 0;\n\n    input[type='password'] {\n        letter-spacing: 0.3em;\n    }\n`;","import { InputHTMLAttributes, FC } from 'react';\nimport { FormInputLabel, Input, Group } from './form-input.styles';\n\ntype FormInputProps = {label: string} & InputHTMLAttributes<HTMLInputElement>\n\nconst FormInput : FC<FormInputProps> = ({ label, ...otherProps }) => {\n    return (\n        <Group>\n            <Input {...otherProps} />\n            {label && (\n                <FormInputLabel shrink={Boolean(\n                    otherProps.value &&\n                    typeof otherProps.value === 'string' &&\n                    otherProps.value.length)}>\n                    {label}\n                </FormInputLabel>\n            )}\n        </Group>\n    );\n};\n\nexport default FormInput;","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 380px;\n\nh2 {\n    margin: 10px 0;\n}\n`;","import { useState, FormEvent, ChangeEvent} from 'react';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component.tsx';\nimport Button from '../button/button.component.tsx';\n\nimport { signUpStart } from '../../store/user/user.action.ts';\n\nimport { SignUpContainer } from './sign-up-form.styles.tsx';\n\nconst defaultFormFields = {\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n};\n\nconst SignUpForm = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { displayName, email, password, confirmPassword } = formFields;\n    const dispatch = useDispatch();\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const handleSubmit = async (event : FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (password !== confirmPassword) {\n            alert('passwords do not match');\n            return;\n        }\n\n        try {\n            dispatch(signUpStart(email, password, displayName));\n            resetFormFields();\n        } catch (error) {\n            if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n                alert('Cannot create user, email already in use');\n            } else {\n                console.log('user creation encountered an error', error);\n            }\n        }\n    };\n\n    const handleChange = (event : ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n    };\n\n    return (\n        <SignUpContainer>\n            <h2>Don't have an account?</h2>\n            <span>Sign up with your email and password</span>\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    label='Display Name'\n                    type='text'\n                    required\n                    onChange={handleChange}\n                    name='displayName'\n                    value={displayName}\n                />\n\n                <FormInput\n                    label='Email'\n                    type='email'\n                    required\n                    onChange={handleChange}\n                    name='email'\n                    value={email}\n                />\n\n                <FormInput\n                    label='Password'\n                    type='password'\n                    required\n                    onChange={handleChange}\n                    name='password'\n                    value={password}\n                />\n\n                <FormInput\n                    label='Confirm Password'\n                    type='password'\n                    required\n                    onChange={handleChange}\n                    name='confirmPassword'\n                    value={confirmPassword}\n                />\n                <Button type='submit'>Sign Up</Button>\n            </form>\n        </SignUpContainer>\n    );\n};\n\nexport default SignUpForm;","import styled from 'styled-components';\n\nexport const SignInContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 380px;\n\nh2 {\n    margin: 10px 0;\n}\n`;\n\nexport const ButtonsContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;","import { useState, FormEvent, ChangeEvent } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component.tsx';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component.tsx';\n\nimport { googleSignInStart, emailSignInStart } from '../../store/user/user.action.ts';\n\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles.tsx';\n\nconst defaultFormFields = {\n    email: '',\n    password: '',\n};\n\nconst SignInForm = () => {\n    const dispatch = useDispatch();\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { email, password } = formFields;\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const signInWithGoogle = async () => {\n        dispatch(googleSignInStart());\n    };\n\n    const handleSubmit = async (event : FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        try {\n            dispatch(emailSignInStart(email, password));\n            resetFormFields();\n        } catch (error) {\n            console.log('user sign in failed', error);\n        }\n    };\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n\n        setFormFields({ ...formFields, [name]: value });\n    };\n\n    return (\n        <SignInContainer>\n            <h2>Already have an account?</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    label='Email'\n                    type='email'\n                    required\n                    onChange={handleChange}\n                    name='email'\n                    value={email}\n                />\n\n                <FormInput\n                    label='Password'\n                    type='password'\n                    required\n                    onChange={handleChange}\n                    name='password'\n                    value={password}\n                />\n                <ButtonsContainer>\n                    <Button type='submit'>Sign In</Button>\n                    <Button\n                        buttonType={BUTTON_TYPE_CLASSES.google}\n                        type='button'\n                        onClick={signInWithGoogle}\n                    >\n                        Sign In With Google\n                    </Button>\n                </ButtonsContainer>\n            </form>\n        </SignInContainer>\n    );\n};\n\nexport default SignInForm;","import styled from 'styled-components';\n\nexport const AuthenticationContainer = styled.div`\n  display: flex;\n  width: 900px;\n  justify-content: space-between;\n  margin: 30px auto;\n`;","import SignUpForm from \"../../components/sign-up-form copy/sign-up-form.component.tsx\";\nimport SignInForm from \"../../components/sign-in-form copy/sign-in-form.component.tsx\";\nimport { AuthenticationContainer } from './authentication.styles';\n\nconst Authentication = () => {\n    return (\n        <AuthenticationContainer>\n        <SignInForm />\n        <SignUpForm />\n        </AuthenticationContainer>\n    );\n};\n\nexport default Authentication;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","_objectWithoutProperties","_excluded","CustomButton","_BUTTON_TYPE_CLASSES$","arguments","length","undefined","base","_defineProperty","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","_objectSpread","disabled","LoadingSpinner","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","_jsxs","Boolean","value","SignUpContainer","defaultFormFields","displayName","email","password","confirmPassword","_useState","useState","_useState2","_slicedToArray","formFields","setFormFields","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","event","_context","prev","next","preventDefault","alert","abrupt","signUpStart","error","code","AuthErrorCodes","console","log","stop","_x","apply","handleChange","_event$target","target","name","onSubmit","FormInput","type","required","onChange","Button","SignInContainer","ButtonsContainer","signInWithGoogle","googleSignInStart","_ref2","_callee2","_context2","emailSignInStart","onClick","AuthenticationContainer","SignInForm","SignUpForm","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}